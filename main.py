#!/usr/bin/env python3
"""
Script principal pour lancer le trader automatis√© Kraken.

Ce script initialise et lance le trader avec les param√®tres de configuration par d√©faut.
"""
import yaml
import json
import os
import signal
import sys
import asyncio
import logging
import logging.config
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from pathlib import Path

# Configuration du logging avant les autres imports
import coloredlogs
from dotenv import load_dotenv

# Configuration du logging avec couleurs
coloredlogs.install(
    level='INFO',
    fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    level_styles={
        'debug': {'color': 'blue'},
        'info': {'color': 'green'},
        'warning': {'color': 'yellow'},
        'error': {'color': 'red'},
        'critical': {'color': 'red', 'bold': True}
    }
)

# Imports des modules du projet
from src.ui.shell import TradingShell
from src.core.database import init_db
from src.core.config import Config
from src.core.api.kraken import KrakenAPI
from src.core.trading.advanced_trader import AdvancedAITrader
from src.core.services.pair_selector import PairSelector
from src.core.simulation_mode import SimulationConfig, SimulationMode
from src.core.database import db_manager

# Configuration du logger principal
logger = logging.getLogger(__name__)

# Charger les variables d'environnement depuis .env
load_dotenv('.env')
logger.info(f"Variables d'environnement charg√©es depuis .env: POSTGRES_USER={os.environ.get('POSTGRES_USER', 'non d√©fini')}")



# Ajouter le dossier parent du projet au PYTHONPATH
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Ajouter le dossier src au PYTHONPATH
def setup_colored_logging():
    """Configure le logging avec des couleurs pour une meilleure lisibilit√©."""
    try:
        import coloredlogs
        coloredlogs.install(
            level='INFO',
            fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            level_styles={
                'debug': {'color': 'blue'},
                'info': {'color': 'green'},
                'warning': {'color': 'yellow'},
                'error': {'color': 'red'},
                'critical': {'color': 'red', 'bold': True}
            }
        )
    except ImportError:
        pass

def setup_logging():
    """Configure le logging pour le bot."""
    config = Config()
    log_dir = os.path.expanduser(os.getenv('LOG_DIR', '~/kraken_bot_logs'))
    os.makedirs(log_dir, exist_ok=True)
    
    # Configuration du logging
    logging.basicConfig(
        level=logging.DEBUG,  # Forcer le niveau DEBUG
        format=config.logging.format,
        handlers=[
            logging.FileHandler(os.path.join(log_dir, 'trading_bot.log')),
            logging.StreamHandler()
        ]
    )
    
    # Configuration sp√©cifique pour le logger root
    root_logger = logging.getLogger()
    root_logger.setLevel(config.logging.level)
    
    # Configuration pour les loggers sp√©cifiques
    for name in ['urllib3', 'aiohttp', 'asyncio']:
        logging.getLogger(name).setLevel(logging.WARNING)
    
    # Activer les logs de d√©bogage pour le module pair_selector
    logging.getLogger('src.core.services.pair_selector').setLevel(logging.DEBUG)
    
    # Configuration des logs de la biblioth√®que requests
    requests_log = logging.getLogger("urllib3")
    requests_log.setLevel(logging.WARNING)
    requests_log.propagate = True

def load_environment():
    """Charge les variables d'environnement depuis le fichier .env"""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        load_dotenv(env_path)
        logger.info("Fichier .env charg√© avec succ√®s")
    else:
        logger.warning("Aucun fichier .env trouv√©, utilisation des variables d'environnement syst√®me")

def check_environment():
    """V√©rifie que les variables d'environnement requises sont d√©finies"""
    required_vars = {
        'KRAKEN_API_KEY': 'Cl√© API Kraken manquante',
        'KRAKEN_API_SECRET': 'Secret API Kraken manquant',
        'POSTGRES_USER': "Nom d'utilisateur PostgreSQL manquant",
        'POSTGRES_PASSWORD': "Mot de passe PostgreSQL manquant",
        'POSTGRES_DB': "Nom de la base de donn√©es PostgreSQL manquant"
    }
    
    missing_vars = []
    for var, message in required_vars.items():
        if not os.getenv(var):
            missing_vars.append((var, message))
    
    if missing_vars:
        errors = "\n".join([f"- {msg}" for _, msg in missing_vars])
        logger.error(f"Configuration invalide:\n{errors}")
        sys.exit(1)
    
    # V√©rification des types et des valeurs
    try:
        config = Config()
        if not config.api.key or not config.api.secret:
            logger.error("Les cl√©s API Kraken ne peuvent pas √™tre vides")
            sys.exit(1)
        
        if not config.db_config['user'] or not config.db_config['password']:
            logger.error("Les identifiants de base de donn√©es ne peuvent pas √™tre vides")
            sys.exit(1)
    except Exception as e:
        logger.error(f"Erreur lors de la validation de la configuration: {str(e)}")
        sys.exit(1)
        logger.info("Veuillez cr√©er un fichier .env avec vos identifiants Kraken")
        logger.info("Exemple de contenu pour .env:")
        logger.info("KRAKEN_API_KEY=votre_cle_api")
        logger.info("KRAKEN_API_SECRET=votre_cle_secrete")
        return False
    return True

def get_trading_config() -> dict:
    """
    R√©cup√®re la configuration du trading depuis les variables d'environnement.
    
    Returns:
        dict: Dictionnaire contenant la configuration du trading
    """
    return {
        'trading_pair': os.getenv('TRADING_PAIR', 'BTC/USD').strip(),
        'trading_amount': float(os.getenv('TRADING_AMOUNT', '0.01')),
        'trading_fee': float(os.getenv('TRADING_FEE', '0.0026')),
        'risk_level': os.getenv('RISK_LEVEL', 'medium').lower(),
        'quote_currency': os.getenv('QUOTE_CURRENCY', 'USD').upper(),
        'min_volume_btc': float(os.getenv('MIN_VOLUME_BTC', '5.0')),
        'max_spread_pct': float(os.getenv('MAX_SPREAD_PCT', '0.5')),
        'min_trades_24h': int(os.getenv('MIN_TRADES_24H', '100')),
        'custom_pairs': [p.strip() for p in os.getenv('CUSTOM_PAIRS', '').split(',') if p.strip()],
        'max_daily_drawdown': float(os.getenv('MAX_DAILY_DRAWDOWN', '5.0')),
        'risk_percentage': float(os.getenv('RISK_PERCENTAGE', '1.0')),
        'max_leverage': float(os.getenv('MAX_LEVERAGE', '1.0'))
    }

async def main_async():
    """
    Fonction principale asynchrone du bot de trading.
    
    G√®re l'initialisation, le d√©marrage et l'arr√™t propre du bot.
    """
    trader = None
    shell = None
    start_time = datetime.now()
    
    try:
        # V√©rifier et initialiser la base de donn√©es
        logger.info("üîß Initialisation de la base de donn√©es...")
        try:
            await init_db()
            logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
            raise
        
        # V√©rifier les variables d'environnement
        logger.info("üîç V√©rification des variables d'environnement...")
        if not all([os.getenv('KRAKEN_API_KEY'), os.getenv('KRAKEN_API_SECRET')]):
            error_msg = "‚ùå Erreur: Les cl√©s API KRAKEN_API_KEY et KRAKEN_API_SECRET sont requises"
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        # V√©rifier la connexion √† la base de donn√©es
        try:
            # Assuming db_manager is defined elsewhere or needs to be initialized
            # For now, we'll just check if it's available
            if 'db_manager' in locals() and db_manager:
                await db_manager.execute("SELECT 1")
                logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie")
            else:
                logger.warning("‚ö†Ô∏è  Gestionnaire de base de donn√©es non initialis√©, impossible de v√©rifier la connexion.")
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
            raise
        
        # Initialiser la configuration
        logger.info("‚öôÔ∏è Initialisation de la configuration...")
        config = Config()
        
        # Initialiser l'API Kraken
        logger.info("üîå Initialisation de l'API Kraken...")
        kraken_api = KrakenAPI(
            api_key=config.api_config['api_key'],
            api_secret=config.api_config['api_secret']
        )
        
        # Charger la configuration YAML
        config_path = os.path.join(os.path.dirname(__file__), 'config', 'config.yaml')
        with open(config_path, 'r') as f:
            config_data = yaml.safe_load(f)
        
        # R√©cup√©rer les paires de trading depuis la configuration
        trading_pairs = config_data.get('trading', {}).get('pairs', [])
        logger.info(f"üìä Paires charg√©es depuis la configuration: {trading_pairs}")
        
        # Initialiser le PairSelector avec les paires configur√©es
        logger.info("üîç Initialisation du s√©lecteur de paires...")
        simulation_config = SimulationConfig(
            mode=SimulationMode.REAL_TIME,
            available_pairs=trading_pairs
        )
        pair_selector = PairSelector(
            api=kraken_api,
            config=simulation_config,
            max_pairs=50,
            min_volume=100000,
            volatility_window=20,
            momentum_window=14
        )
        
        # Configuration du trader
        TRADING_CONFIG = get_trading_config()
        
        # R√©cup√©rer les paires valides
        valid_pairs = await pair_selector.get_valid_pairs()
        logger.info(f"‚úÖ {len(valid_pairs)} paires valides r√©cup√©r√©es pour le trading")
        
        # Ajouter les paires valides √† la configuration
        TRADING_CONFIG['trading_pairs'] = valid_pairs
        
        # Initialiser le trader avec la configuration mise √† jour
        logger.info("ü§ñ Initialisation du trader...")
        trader = AdvancedAITrader(
            api=kraken_api,
            config=TRADING_CONFIG,
            db_manager=db_manager
        )
        
        # S'assurer que les paires valides sont bien dans la configuration du trader
        trader.config['trading_pairs'] = valid_pairs
        
        # Initialiser l'interface CLI
        logger.info("üñ•Ô∏è Initialisation de l'interface CLI...")
        shell = TradingShell(trader=trader)
            
        # Charger la configuration et r√©cup√©rer les paires valides
        logger.info("‚öôÔ∏è  Chargement de la configuration...")
        try:
            # R√©cup√©rer les paires valides directement via get_valid_pairs
            trading_config = config_data.get('trading', {})
            min_score = trading_config.get('min_score', 0.0)
            min_volume = trading_config.get('min_volume', 0)
            valid_pairs = await pair_selector.get_valid_pairs(min_score=min_score)
            logger.info(f"‚úÖ Configuration charg√©e: {len(valid_pairs)} paires Kraken valides (chargement dynamique)")
            
            # Afficher les paires s√©lectionn√©es
            if valid_pairs:
                logger.info("üìä Paires s√©lectionn√©es pour le trading:")
                for i, pair in enumerate(valid_pairs, 1):
                    logger.info(f"   {i}. {pair}")
            else:
                logger.warning("‚ö†Ô∏è  Aucune paire valide trouv√©e avec les crit√®res actuels")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement de la configuration: {e}", exc_info=True)
            raise
        
        # Initialiser l'API Kraken
        logger.info("üîå Initialisation de l'API Kraken...")
        try:
            async with KrakenAPI(
                api_key=os.getenv('KRAKEN_API_KEY'),
                api_secret=os.getenv('KRAKEN_API_SECRET')
            ) as kraken_api:
                # Tester la connexion √† l'API
                await kraken_api.get_server_time()
                logger.info("‚úÖ Connexion √† l'API Kraken √©tablie")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation de l'API Kraken: {e}")
            raise
        
        # Initialiser le pr√©dicteur de march√©
        logger.info("üß† Initialisation du pr√©dicteur de march√©...")
        try:
            from src.ml.predictor import MLPredictor
            predictor = MLPredictor(db_manager=db_manager)
            logger.info("‚úÖ Pr√©dicteur de march√© initialis√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du pr√©dicteur: {e}")
            raise
        
        # Le s√©lecteur de paires a d√©j√† √©t√© initialis√© plus haut
        # avec la configuration appropri√©e
        
        # Initialiser l'interface CLI
        logger.info("üñ•Ô∏è  Initialisation de l'interface CLI...")
        shell = TradingShell(trader=trader)
        
        # D√©marrer l'interface CLI
        await shell.run()
        
        # Les paires valides ont d√©j√† √©t√© r√©cup√©r√©es plus haut avec pair_selector.get_valid_pairs()
        # et stock√©es dans valid_pairs
        
        # Initialiser le trader
        logger.info("ü§ñ Initialisation du trader...")
        try:
            trader = AdvancedAITrader(
                api=kraken_api,
                predictor=predictor,
                config=config,  # Passer la configuration au trader
                db_manager=db_manager  # Passer le gestionnaire de base de donn√©es
            )
            logger.info("‚úÖ Trader initialis√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du trader: {e}")
            raise
        
        # Afficher le r√©sum√© de d√©marrage
        logger.info("\n" + "="*60)
        logger.info(f"üöÄ D√âMARRAGE DU BOT DE TRADING - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("="*60)
        logger.info(f"üìà Paires actives: {', '.join(valid_pairs)}")
        logger.info(f"‚è±  Timeframe: {TRADING_CONFIG.get('timeframe', 'N/A')} minutes")
        logger.info(f"üéØ Niveau de risque: {config['risk_level'].upper()}")
        logger.info(f"üíµ Balance initiale: {config.get('initial_balance', 'N/A')} {config.get('quote_currency', 'N/A')}")
        logger.info("="*60 + "\n")

        # D√©marrer le trader de mani√®re asynchrone sur les paires s√©lectionn√©es
        # Cr√©er un mapping des symboles pour l'API Kraken
        symbol_mapping = {pair: pair.replace('/', '') for pair in valid_pairs}
        await trader.run()
        
    except KeyboardInterrupt:
        logger.info("\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"\n‚ùå ERREUR CRITIQUE: {e}", exc_info=True)
        # Sauvegarder l'erreur pour l'analyse ult√©rieure
        try:
            error_log = {
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'type': type(e).__name__,
                'traceback': str(sys.exc_info()[2]) # Corrected traceback retrieval
            }
            with open(os.path.join('logs', 'error_log.json'), 'a') as f:
                f.write(json.dumps(error_log) + '\n')
        except Exception as log_error:
            logger.error(f"√âchec de l'enregistrement du journal d'erreur: {log_error}")
        raise
    finally:
        end_time = datetime.now()
        duration = end_time - start_time
        
        logger.info("\n" + "="*60)
        logger.info(f"üõë ARR√äT DU BOT DE TRADING - {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"‚è±  Dur√©e de fonctionnement: {duration}")
        
        if trader is not None:
            try:
                logger.info("Arr√™t en cours du trader...")
                if asyncio.iscoroutinefunction(trader.stop):
                    await trader.stop()
                else:
                    trader.stop()
                logger.info("‚úÖ Trader arr√™t√© avec succ√®s")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'arr√™t du trader: {e}")
            
            # Sauvegarder les logs et les statistiques
            try:
                save_trading_summary()
                logger.info("‚úÖ R√©sum√© de trading sauvegard√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la sauvegarde du r√©sum√©: {e}")
        
        # Fermer la connexion √† la base de donn√©es
        try:
            await db_manager.close()
            logger.info("‚úÖ Connexion √† la base de donn√©es ferm√©e")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la fermeture de la base de donn√©es: {e}")
        
        logger.info("="*60)

def pair_selector_summary(selector) -> str:
    """G√©n√®re un r√©sum√© des analyses du s√©lecteur de paires."""
    if not selector or not hasattr(selector, '_pair_metrics'):
        return "Aucune analyse disponible"
        
    summary = ["\n=== Analyse des paires ===\n"]
    
    # Trier les paires par score de march√© d√©croissant
    pairs = sorted(
        [(k, v) for k, v in selector._pair_metrics.items() if k in selector._recommended_pairs],
        key=lambda x: x[1].get('market_score', 0),
        reverse=True
    )
    
    for pair_id, metrics in pairs[:10]:  # Afficher les 10 meilleures paires
        pair = selector._recommended_pairs.get(pair_id)
        if not pair:
            continue
            
        analysis = pair.analysis
        trend_arrow = '‚Üë' if analysis.trend == 'up' else '‚Üì' if analysis.trend == 'down' else '‚Üí'
        
        summary.append(
            f"{pair_id} | "
            f"Score: {metrics.get('market_score', 0):.2f} | "
            f"Prix: {metrics.get('last_price', 0):.2f} {pair_id[-3:]} | "
            f"Tendance: {trend_arrow} {analysis.trend_strength*100:.1f}% | "
            f"Volatilit√©: {analysis.volatility*100:.2f}% | "
            f"Volume: {metrics.get('volume_24h', 0):.2f} BTC"
        )
    
    return "\n".join(summary)

def save_trading_summary():
    """Sauvegarde un r√©sum√© de la session de trading."""
    try:
        summary = {
            'end_time': datetime.utcnow().isoformat(),
            'pairs_traded': [],
            'performance': {}
        }
        
        # Ici, vous pourriez ajouter plus de donn√©es de performance
        # √† partir de l'instance du trader
        
        with open('trading_summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
            
        logger.info("R√©sum√© de trading sauvegard√©")
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde du r√©sum√©: {e}")
        
    # Cr√©er un gestionnaire de signaux pour l'arr√™t propre
    def signal_handler(sig, frame):
        logger.info("\nSignal d'arr√™t re√ßu, arr√™t en cours...")
        raise KeyboardInterrupt()
        
    # Enregistrer les gestionnaires de signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logger.info("\nArr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur lors de l'ex√©cution du bot : {e}")
