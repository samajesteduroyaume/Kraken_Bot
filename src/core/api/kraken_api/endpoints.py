"""
Module contenant les endpoints de l'API Kraken.
"""

import asyncio
import socket
import aiohttp
from typing import Dict, Any, Optional, Tuple
import logging
import uuid
from datetime import datetime, timezone

from .validators import Validator
from .exceptions import KrakenAPIError, APIConnectionError
from src.core.market.available_pairs_refactored import available_pairs


class KrakenEndpoints:
    def __init__(self, client):
        self.client = client
        self.validator = Validator()
        self.logger = logging.getLogger(__name__ + '.KrakenEndpoints')
        # Cache pour stocker le mapping des paires de trading
        self._pair_mapping = {}
        self._pair_mapping_loaded = False

    async def get_ohlc_data(self, pair: str, interval: int = 1, since: Optional[int] = None, timeout: float = 15.0) -> Dict[str, Any]:
        """
        R√©cup√®re les donn√©es OHLC (Open, High, Low, Close) pour une paire de trading.

        Args:
            pair: Symbole de la paire de trading (ex: 'XXBTZUSD')
            interval: Intervalle de temps en minutes (1, 5, 15, 30, 60, 240, 1440, 10080, 21600)
            since: Timestamp UNIX pour r√©cup√©rer les donn√©es depuis une date sp√©cifique (optionnel)
            timeout: D√©lai maximal d'attente en secondes (15 secondes par d√©faut)

        Returns:
            Dictionnaire contenant les donn√©es OHLC et le dernier timestamp

        Raises:
            ValueError: Si les param√®tres sont invalides
            KrakenAPIError: Si l'API retourne une erreur
            asyncio.TimeoutError: Si le d√©lai d'attente est d√©pass√©
        """
        request_id = str(uuid.uuid4())[:8]
        self.logger.info(f"üîç [5/5] [{request_id}] D√©but de get_ohlc_data pour la paire: {pair}, intervalle: {interval}, since: {since}")
        
        try:
            # V√©rification simplifi√©e de la connectivit√© Internet
            try:
                # V√©rification directe avec asyncio.open_connection
                reader, writer = await asyncio.wait_for(
                    asyncio.open_connection("kraken.com", 443),
                    timeout=5.0
                )
                writer.close()
                await writer.wait_closed()
                self.logger.info(f"‚úÖ [5/5] [{request_id}] Connectivit√© Internet v√©rifi√©e")
            except (asyncio.TimeoutError, OSError) as e:
                error_msg = f"‚ùå [5/5] [{request_id}] Pas de connectivit√© Internet ou impossible de joindre Kraken: {str(e)}"
                self.logger.error(error_msg)
                raise APIConnectionError(error_msg) from e
            
            # Le reste de la m√©thode reste inchang√©
            self.logger.info(f"üîç [5/5] [{request_id}] Validation des param√®tres...")
            self.validator.validate_pair(pair)
            self.validator.validate_ohlc_interval(interval)
            
            if since is not None and not isinstance(since, int):
                error_msg = f"‚ùå [5/5] [{request_id}] Le param√®tre 'since' doit √™tre un timestamp UNIX (entier)"
                self.logger.error(error_msg)
                raise ValueError(error_msg)

            params = {
                'pair': pair,
                'interval': interval
            }
            
            if since is not None:
                params['since'] = since

            self.logger.info(f"üîç [5/5] [{request_id}] Pr√©paration de la requ√™te OHLC avec params: {params}")
            
            # Utiliser wait_for pour ajouter un timeout √† la requ√™te
            request_task = self.client._request('GET', 'public/OHLC', params)
            self.logger.info(f"üîç [5/5] [{request_id}] Envoi de la requ√™te OHLC (timeout: {timeout}s)...")
            
            try:
                response = await asyncio.wait_for(request_task, timeout=timeout)
                
                if not isinstance(response, dict):
                    error_msg = f"‚ùå [5/5] [{request_id}] Format de r√©ponse inattendu pour les donn√©es OHLC: {type(response).__name__}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                candles = response.get(pair, [])
                self.logger.info(f"‚úÖ [5/5] [{request_id}] R√©ponse OHLC re√ßue: {len(candles)} bougies")
                
                if not candles:
                    self.logger.warning(f"‚ö†Ô∏è [5/5] [{request_id}] Aucune donn√©e OHLC disponible pour la paire {pair}")
                
                return response
                
            except asyncio.TimeoutError:
                error_msg = f"‚ùå [5/5] [{request_id}] Timeout de {timeout} secondes d√©pass√© pour get_ohlc_data"
                self.logger.error(error_msg)
                raise asyncio.TimeoutError(error_msg) from None
                
        except Exception as e:
            if not isinstance(e, (KrakenAPIError, asyncio.TimeoutError, APIConnectionError, ValueError)):
                error_msg = f"‚ùå [5/5] [{request_id}] Erreur inattendue lors de la r√©cup√©ration des donn√©es OHLC: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            raise  # Relancer les erreurs d√©j√† g√©r√©es

    async def get_asset_pairs(self, pair: Optional[str] = None, timeout: float = 10.0) -> Dict[str, Any]:
        """
        R√©cup√®re les informations sur les paires d'actifs disponibles sur Kraken.

        Args:
            pair: Symbole de la paire de trading (optionnel). Si non sp√©cifi√©, toutes les paires sont retourn√©es.
            timeout: D√©lai maximal d'attente en secondes (10 secondes par d√©faut)

        Returns:
            Dictionnaire avec les informations pour chaque paire, o√π les cl√©s sont les symboles des paires
            et les valeurs sont des dictionnaires contenant les d√©tails de chaque paire.

        Raises:
            ValueError: Si les param√®tres sont invalides
            KrakenAPIError: Si l'API retourne une erreur
            asyncio.TimeoutError: Si le d√©lai d'attente est d√©pass√©
        """
        request_id = str(uuid.uuid4())[:8]
        self.logger.info(f"üîç [5/5] [{request_id}] D√©but de get_asset_pairs pour la paire: {pair if pair else 'toutes'}")
        
        try:
            # V√©rifier la connexion Internet avant de continuer
            try:
                await asyncio.wait_for(asyncio.get_event_loop().getaddrinfo("kraken.com", 443), timeout=5.0)
                self.logger.info(f"‚úÖ [5/5] [{request_id}] Connectivit√© Internet v√©rifi√©e")
            except (asyncio.TimeoutError, OSError) as e:
                error_msg = f"‚ùå [5/5] [{request_id}] Pas de connectivit√© Internet ou impossible de joindre Kraken: {str(e)}"
                self.logger.error(error_msg)
                raise APIConnectionError(error_msg) from e
            
            # Pr√©parer les param√®tres de la requ√™te
            params = {}
            if pair is not None:
                self.logger.info(f"üîç [5/5] [{request_id}] Validation de la paire: {pair}")
                self.validator.validate_pair(pair)
                params['pair'] = pair
                self.logger.info(f"‚úÖ [5/5] [{request_id}] Paire valid√©e: {pair}")

            self.logger.info(f"üîç [5/5] [{request_id}] Pr√©paration de la requ√™te API avec params: {params}")
            
            # Utiliser wait_for pour ajouter un timeout √† la requ√™te
            request_task = self.client._request('GET', 'public/AssetPairs', params)
            self.logger.info(f"üîç [5/5] [{request_id}] Requ√™te API cr√©√©e, attente de la r√©ponse (timeout: {timeout}s)...")
            
            try:
                # R√©duire le timeout pour √©viter les blocages prolong√©s
                response = await asyncio.wait_for(request_task, timeout=timeout)
                
                if not isinstance(response, dict):
                    error_msg = f"‚ùå [5/5] [{request_id}] Format de r√©ponse inattendu: {type(response).__name__}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                    
                self.logger.info(f"‚úÖ [5/5] [{request_id}] R√©ponse API re√ßue, {len(response)} paires")
                return response
                
            except asyncio.TimeoutError:
                error_msg = f"‚ùå [5/5] [{request_id}] Timeout de {timeout} secondes d√©pass√© pour get_asset_pairs"
                self.logger.error(error_msg)
                raise asyncio.TimeoutError(error_msg) from None
                
            except Exception as e:
                error_msg = f"‚ùå [5/5] [{request_id}] Erreur lors de l'attente de la r√©ponse: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            
        except Exception as e:
            if not isinstance(e, (KrakenAPIError, asyncio.TimeoutError, APIConnectionError)):
                error_msg = f"‚ùå [5/5] [{request_id}] Erreur inattendue lors de la r√©cup√©ration des paires d'actifs: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            raise  # Relancer les erreurs d√©j√† g√©r√©es

    async def get_ticker(self, pair: str, timeout: float = 10.0) -> Dict[str, Any]:
        """
        R√©cup√®re les informations de prix en temps r√©el pour une paire de trading.

        Args:
            pair: Symbole de la paire de trading (ex: 'XXBTZUSD')
            timeout: D√©lai maximal d'attente en secondes (10 secondes par d√©faut)

        Returns:
            Dictionnaire contenant les informations de prix avec la structure suivante :
            {
                'a': [ask_price, ask_lot, timestamp],
                'b': [bid_price, bid_lot, timestamp],
                'c': [last_price, last_lot],
                'v': [volume_today, volume_24h],
                'p': [vwap_today, vwap_24h],
                't': [trades_today, trades_24h],
                'l': [low_today, low_24h],
                'h': [high_today, high_24h],
                'o': open_price
            }

        Raises:
            ValueError: Si les param√®tres sont invalides
            KrakenAPIError: Si l'API retourne une erreur
            asyncio.TimeoutError: Si le d√©lai d'attente est d√©pass√©
        """
        request_id = str(uuid.uuid4())[:8]
        self.logger.info(f"üîç [5/5] [{request_id}] D√©but de get_ticker pour la paire: {pair}")
        
        try:
            # V√©rification de la connectivit√© Internet
            try:
                reader, writer = await asyncio.wait_for(
                    asyncio.open_connection("kraken.com", 443),
                    timeout=5.0
                )
                writer.close()
                await writer.wait_closed()
                self.logger.info(f"‚úÖ [5/5] [{request_id}] Connectivit√© Internet v√©rifi√©e")
            except (asyncio.TimeoutError, OSError) as e:
                error_msg = f"‚ùå [5/5] [{request_id}] Pas de connectivit√© Internet ou impossible de joindre Kraken: {str(e)}"
                self.logger.error(error_msg)
                raise APIConnectionError(error_msg) from e
            
            # Validation de la paire
            self.logger.info(f"üîç [5/5] [{request_id}] Validation de la paire: {pair}")
            self.validator.validate_pair(pair)
            self.logger.info(f"‚úÖ [5/5] [{request_id}] Paire valid√©e: {pair}")

            # Pr√©paration des param√®tres de la requ√™te
            params = {'pair': pair}
            self.logger.info(f"üîç [5/5] [{request_id}] Pr√©paration de la requ√™te Ticker avec params: {params}")
            
            # Utiliser wait_for pour ajouter un timeout √† la requ√™te
            request_task = self.client._request('GET', 'public/Ticker', params)
            self.logger.info(f"üîç [5/5] [{request_id}] Envoi de la requ√™te Ticker (timeout: {timeout}s)...")
            
            try:
                # Attendre la r√©ponse avec un timeout
                response = await asyncio.wait_for(request_task, timeout=timeout)
                
                if not isinstance(response, dict):
                    error_msg = f"‚ùå [5/5] [{request_id}] Format de r√©ponse inattendu pour le ticker: {type(response).__name__}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                # Extraire les donn√©es de la paire demand√©e
                if pair not in response:
                    error_msg = f"‚ùå [5/5] [{request_id}] Paire {pair} non trouv√©e dans la r√©ponse"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                ticker_data = response[pair]
                self.logger.info(f"‚úÖ [5/5] [{request_id}] Donn√©es Ticker re√ßues pour {pair}")
                return ticker_data
                
            except asyncio.TimeoutError:
                error_msg = f"‚ùå [5/5] [{request_id}] Timeout de {timeout} secondes d√©pass√© pour get_ticker"
                self.logger.error(error_msg)
                raise asyncio.TimeoutError(error_msg) from None
                
            except Exception as e:
                error_msg = f"‚ùå [5/5] [{request_id}] Erreur lors de la r√©cup√©ration du ticker: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            
        except Exception as e:
            if not isinstance(e, (KrakenAPIError, asyncio.TimeoutError, APIConnectionError)):
                error_msg = f"‚ùå [5/5] [{request_id}] Erreur inattendue lors de la r√©cup√©ration du ticker: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            raise  # Relancer les erreurs d√©j√† g√©r√©es

    async def get_orderbook(self, pair: str, count: int = 100, timeout: float = 10.0) -> Dict[str, Any]:
        """
        R√©cup√®re le carnet d'ordres pour une paire de trading.

        Args:
            pair: Symbole de la paire de trading (ex: 'XXBTZUSD')
            count: Nombre d'ordres √† r√©cup√©rer (max 500)
            timeout: D√©lai maximal d'attente en secondes (10 secondes par d√©faut)

        Returns:
            Dictionnaire contenant les offres (asks) et les demandes (bids) avec la structure suivante :
            {
                'pair_name': {
                    'asks': [ [price, volume, timestamp], ... ],
                    'bids': [ [price, volume, timestamp], ... ]
                }
            }

        Raises:
            ValueError: Si les param√®tres sont invalides
            KrakenAPIError: Si l'API retourne une erreur
            asyncio.TimeoutError: Si le d√©lai d'attente est d√©pass√©
            APIConnectionError: Si la connexion √† l'API √©choue
        """
        request_id = str(uuid.uuid4())[:8]
        self.logger.info(f"üîç [{request_id}] D√©but de get_orderbook pour la paire: {pair}, count: {count}")
        
        try:
            # V√©rification de la connectivit√© Internet
            try:
                reader, writer = await asyncio.wait_for(
                    asyncio.open_connection("kraken.com", 443),
                    timeout=5.0
                )
                writer.close()
                await writer.wait_closed()
                self.logger.info(f"‚úÖ [{request_id}] Connectivit√© Internet v√©rifi√©e")
            except (asyncio.TimeoutError, OSError) as e:
                error_msg = f"‚ùå [{request_id}] Pas de connectivit√© Internet ou impossible de joindre Kraken: {str(e)}"
                self.logger.error(error_msg)
                raise APIConnectionError(error_msg) from e
            
            # Validation des param√®tres
            self.validator.validate_pair(pair)
            if not isinstance(count, int) or count < 1 or count > 500:
                error_msg = f"‚ùå [{request_id}] Le param√®tre 'count' doit √™tre un entier entre 1 et 500"
                self.logger.error(error_msg)
                raise ValueError(error_msg)
            
            # Pr√©paration des param√®tres de la requ√™te
            params = {
                'pair': pair,
                'count': count
            }
            
            self.logger.info(f"üîç [{request_id}] Pr√©paration de la requ√™te OrderBook avec params: {params}")
            
            # Envoi de la requ√™te avec timeout
            request_task = self.client._request('GET', 'public/Depth', params)
            self.logger.info(f"üîç [{request_id}] Envoi de la requ√™te OrderBook (timeout: {timeout}s)...")
            
            try:
                response = await asyncio.wait_for(request_task, timeout=timeout)
                
                if not isinstance(response, dict):
                    error_msg = f"‚ùå [{request_id}] Format de r√©ponse inattendu pour l'orderbook: {type(response).__name__}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                # V√©rification de la pr√©sence de la paire dans la r√©ponse
                if not response:
                    error_msg = f"‚ùå [{request_id}] R√©ponse vide de l'API pour l'orderbook"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                # Le nom de la paire dans la r√©ponse peut √™tre diff√©rent (ex: 'XBTUSD' au lieu de 'XXBTZUSD')
                pair_key = next(iter(response.keys()), None)
                if not pair_key:
                    error_msg = f"‚ùå [{request_id}] Aucune donn√©e d'orderbook trouv√©e pour la paire {pair}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                orderbook_data = response[pair_key]
                
                # Validation de la structure des donn√©es
                if 'asks' not in orderbook_data or 'bids' not in orderbook_data:
                    error_msg = f"‚ùå [{request_id}] Format de donn√©es d'orderbook invalide: {orderbook_data.keys()}"
                    self.logger.error(error_msg)
                    raise KrakenAPIError(error_msg)
                
                self.logger.info(f"‚úÖ [{request_id}] OrderBook re√ßu avec {len(orderbook_data['asks'])} asks et {len(orderbook_data['bids'])} bids")
                return response
                
            except asyncio.TimeoutError:
                error_msg = f"‚ùå [{request_id}] Timeout de {timeout} secondes d√©pass√© pour get_orderbook"
                self.logger.error(error_msg)
                raise asyncio.TimeoutError(error_msg) from None
                
            except Exception as e:
                error_msg = f"‚ùå [{request_id}] Erreur lors de la r√©cup√©ration de l'orderbook: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            
        except Exception as e:
            if not isinstance(e, (KrakenAPIError, asyncio.TimeoutError, APIConnectionError, ValueError)):
                error_msg = f"‚ùå [{request_id}] Erreur inattendue lors de la r√©cup√©ration de l'orderbook: {str(e)}"
                self.logger.error(error_msg, exc_info=True)
                raise KrakenAPIError(error_msg) from e
            raise  # Relancer les erreurs d√©j√† g√©r√©es

    async def get_balance(self) -> Dict[str, float]:
        """
        R√©cup√®re le solde du compte.

        Returns:
            Dictionnaire avec les montants pour chaque actif

        Raises:
            KrakenAPIError: Si l'API retourne une erreur
            asyncio.TimeoutError: Si le d√©lai d'attente est d√©pass√©
            APIConnectionError: Si la connexion √† l'API √©choue
        """
        request_id = str(uuid.uuid4())[:8]
        self.logger.info(f"üîç [{request_id}] D√©but de get_balance")
        
        try:
            # V√©rification de la connectivit√© Internet
            try:
                reader, writer = await asyncio.wait_for(
                    asyncio.open_connection("kraken.com", 443),
                    timeout=5.0
                )
                writer.close()
                await writer.wait_closed()
                self.logger.info(f"‚úÖ [{request_id}] Connectivit√© Internet v√©rifi√©e")
            except (asyncio.TimeoutError, OSError) as e:
                error_msg = f"‚ùå [{request_id}] Pas de connectivit√© Internet ou impossible de joindre Kraken: {str(e)}"
                self.logger.error(error_msg)
                raise APIConnectionError(error_msg) from e

            # Envoi de la requ√™te
            self.logger.info(f"üîç [{request_id}] Envoi de la requ√™te de solde...")
            response = await self.client._request('POST', 'private/Balance', private=True)
            
            if not isinstance(response, dict):
                error_msg = f"‚ùå [{request_id}] Format de r√©ponse inattendu pour le solde: {type(response).__name__}"
                self.logger.error(error_msg)
                raise KrakenAPIError(error_msg)
                
            self.logger.info(f"‚úÖ [{request_id}] Solde r√©cup√©r√© avec succ√®s: {len(response)} actifs")
            return response
            
        except KrakenAPIError:
            raise  # Relancer les erreurs d√©j√† g√©r√©es
            
        except Exception as e:
            error_msg = f"‚ùå [{request_id}] Erreur inattendue lors de la r√©cup√©ration du solde: {str(e)}"
            self.logger.error(error_msg, exc_info=True)
            raise KrakenAPIError(error_msg) from e
